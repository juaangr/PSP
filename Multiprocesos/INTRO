PRORGAMACIÓN DE COMUNICACIÓN EN RED
PYTHON TODO
ESCENARIOS DONDE LA COMUNICACIÓN EN RED ES NECESARIA; 

La programación en red es el desarrollo de apps que se comunican entre sí a través de una red.


No hay programas que a día de hoy, no estén comunicados con internet, pueden ser cualquier tipo de programa,
ya sea IoT, videojuegos en línea, servicios web; cliente-servidor, p2p,


// IoT es un paradigma de red que conecta con ordenadores más pequeños para poder sacar mucha información en masa, concepto de (red en) malla


___________________________________________________________________________________________________________________________________________________


ROLES Y FUNCIONES EN ARQUITECTURAS CLIENTE-SERVIDOR;

Cuando hablamos de una arquitectura cliente-servidor, no estamos hablando de 
distinción por hardware sino por software.
Un cliente y un servidor son apps que pueden ejecutar en una máquina y se 
comunican entre sí. La app cliente solicitará siempre información que en 
principio deberá resolver y devolver el servidor, mientras que el servidor
calculará la solución a la petición del cliente, en caso de no saberla, 
probablemente propague la consulta a otros servers antes de responder.

Podemos resumir el rol de servidor con sus funciones como:
    Esperar y recibir solicitudes 
    Procesar esas solicitudes y ejecutar lo necesario para resolverlas, como consultas sql,
    manejando recursos compartidos como BBDD
    Se asegura de no crear conflictos al acceder a los recursos, gestiona la concurrencia
    Verifica la identidad de los clientes y se asegura que solo los autorizados realicen acciones

Podemos resumir el rol de cliente como; 
    Inicia la comunicación
    Envía peticiones al servidor a través de protocolos de red (HTTP, FTP...)
    Proporciona interfaz gráfica o textual a los usrs.
    Realiza ciertos cálculos locales, como validaciones o procesamiento 
    previo de la información que se envía al servidor
    Recibe y procesa las respuestas del servidor

Arquitectura cliente-servidor
todos los clientes piden servicio a un servidor y este devuelve el servicio, aparece el concepto de DNS, HCP se encarga de
tomar una IP de forma dinámica
Si mi PC no consigue reconocer un DNS, la petición va escalando en servidores que si puedan tener mi petición (se propaga)

Arquitectura en 2 capas, por un lado yo tengo mi cliente que manda una petición a un servidor que me va a poder responder 
a parte, nuestro servidor tiene un server apache y hace una petición a una bbdd oracle, entonces trabajaremos con mi servidor actuando
de cliente con el servidor de oracle, aquí ya pasariamos a tener tres capas.
Marenostrum 5

A nivel de seguridad, cuantas más capas haya mejor, ya que tendremos la información esparcida en todos los nodos 

// block-chain red de ordenadores conectada que se asegura de que al pedir datos por ejemplo, de que todos te devuelvan el mismo valor

___________________________________________________________________________________________________________________________________________________

LIBRERIAS Y MECANISMOS PARA APPS EN RED;

// Usaremos la libreria socket, para crear y manejar conexiones de red a bajo
// nivel usando sockets TCP/UDP
// y la libreria request para realizar peticiones HTTP/HTTPS
// urllib, scapy, paramiko, flask
// asyncio, fastAPI, 
// (solo flask); Un servicio web REST usa los servicios de http 

socket: para crear y manejar conexiones de red a bajo nivel usando sockets
        TCP/UDP
requests: para realizar peticiones HTTP/HTTPS de forma simple (APIs)
urlib: libreria para trabajar con URLs
scapy: para analizar, construir y manipular paquetes de red (avanzado)
paramiko: para manejar conexiones SSH y SFTP
flask: framework ligero para crear apps web y servicios REST

Podemos usar varias librerías del propio lenguaje que nos ayudarán a hacer
apps en red de forma más o menos simple;
asyncio: soporta programación asíncrona para conexiones de red de alto 
         rendimiento
fastAPI
ftplib
websockets .........

___________________________________________________________________________________________________________________________________________________


CONCEPTO DE SOCKET, TIPOS Y CARACTERÍSTICAS DE LOS SOCKETS;

Un socket es un extremo en una comunicación bidireccional entre dos apps que se ejecutan en red. Es uno de los mecanismos utilizados por 
los programas para enviar y recibir datos a través de la red, ya sea en Internet o en una red local.
//Es un conector 
Los sockets abstraen los detalles de la comunicación (protocolos, transporte)
para que las apps solo tengan que ocuparse de intercambiar datos.


SE SEPARAN EN DOS FAMILIAS;

    Con orientación a conexión;
        // Se usan en Chats (o al menos vamos a pensar en esa dinámica)
        Se les llama así porque están basados en el protocolo TCP (Transmission Control Protocol), que requiere una conexión estable
        Proveen una conexión confiable, lo que quiere decir que los datos se entregan en orden y sin pérdidas (se asegura de que todo llega
        a través de comunicaciones de ACKNOWLEDGEMENT)
        Sus usos son las apps web, servidores web, navegadores...

    Sin orientación a conexión (no orientados a conn); 
        // Cosas que necesitan una respuesta en tiempo real, llamadas
        Basados en UDP (User Datagram Protocol), que NO requiere de una conexión estable
        No proveen una conexión confiable, puede haber pérdidas, pueden 
        llegar paquetes en orden diferente al deseado y no tiene 
        confirmaciones de llegada, 
        Son mucho más rápidos que los orientados a conn
        Sus usos son; streaming, voIP, DNS, juegos en línea


Sockets multicast;
    Son sockets especiales no orientados a conexión que nos permite enviar datos a varios destinatarios simultáneamente usando UDP
    Se suelen usar en videoconferencias grupales, transmisión en vivo a 
    múltiples clientes
    Usan direcciones IP "especiales", designadas a formar grupos multicast
    de la 224.0.0.0 a la 230.255.255.255
    Hay que asegurarse de que el trafico multicast está permitido y que la 
    ip puesta sea admitida
    Sus usos son voIP, streaming...
    Se establecen numeros maximos de salto de router (TTL, time to live)
    que limítan el alcance de los paquetes
    // wlp1s0   este es el puerto que permite (al menos en el pc del profe) [ip adress]



CARACTERISTICAS DE LOS SOCKETS;
    Transparencia: Para la app, los detalles del hardware o de la conexión
                   son transparentes a la hora de intercambiar información.
    Direccionamiento, los sockets se identificarán usando una combinación de:
        Dirección IP
        Puerto
        Protocolo
    Los sockets pueden configurarse para trabajar en modos blocantes 
    (esperan hasta terminar una operación), o no blocantes, que devuelven el
    control inmediatamente.
    Interoperabilidad, pueden usarse para comunicar sistemas con diferente
    SO o arquitecturas

// los primeros 1024 puertos estan cerrados, tenemos que decir que recicle el puerto ya que tras usarlo queda bloq un tiempo

_______________________________________________________________________________________________________________________________________________

USO DE SOCKETS PARA COMUNICAR CLIENTES Y SERVIDORES:

Server
    creación del socket
    asocia socket a una ip y puerto específico (bind)
    escucha las conexiones entrantes 
    acepta las conexiones y establece la comunicación

client
    creación del socket
    Conexión (o no) al socket servidor usando su IP y puerto
    Envío de la información y recibimiento de la respuesta


La librería socket nos permite crear sockets usando el método socket(), tenemos que especificar la familia de direcciones (ip), normalmente usaremos
AF_INET, perteneciente a IPv4. Esta familia (AdressFamily) tiene un par
"host, puerto" donde podremos poner o un dominio de internet o una IPv4,
el puerto es un nº entero.
socket(familia, tipo, protocolo=0, file=None)
Los tipos de socket serán o SOCK_STREAM (TCP), o SOCK_DGRAM (UDP)

Los métodos más interesantes que podemos utilizar con los sockets, son;
· socket(), constructor de un socket
· bind(), establece el puerto y la dirección del servidor TCP/UDP
· listen(), escucha de peticiones por el servidor TCP
· accept(), aceptar conexión por el servidor TCP 
· connect(), crear conexión desde el cliente TCP 
· close(), Cierre del socket TCP 
· recv(), recibir info escrita en el socket TCP 
· send(), enviar info en una conexión TCP
· sendto(), enviar info a través de un socket UDP
· recvfrom(), recibir info a través de un socket UDP


USO DE HILOS PARA COMUNICACIÓN SIMULTANEA DE CLIENTES:

from threading import Thread o algo así

Solo vimos la version blocante de los sockets, lo que hace que al ejecutar
en un server cualquiera como uno TCP un accept(), la conexión se establezca con un socket 
cliente y no puedan otros sockets clientes conectar con el server hasta que este no termine 
con el primer cliente
Para mejorar esto, podemos hacer que nuestro server use la concurrencia de los hilos para
responder a cada cliente en uno diferente, es decir, mantenter una conexión en cada hilo

Para crear hilops en python lo podemos hacer de una forma bastante parecida a como lo hacíamos
para ejecutar en procesos nuevos una función manejadora.

importaremos la biblioteca threading y usaremos la función:
threading.Thread(target=manejador, args=(cliente, dir_cliente))

es muy similar a la función ya conocida:
multiprocesing.Process(target=manejador, args=(loQueSea))

De esta forma podemos dedicar el hilo principal a escuchar y aceptar
nuevas conexiones, mientras que por cada una de ellas se gestiona la comunicación en red a
través de los sockets


MODELOS DE COMM MÁS HABITUALES EN APPS DISTRIBUIDAS:

· Modelo cliente servidor: (Solicitud-respuesta), Un nodo cliente envía la solicitud a otros
                           nodos servidores y espera una respuesta, puede ser síncrono o async,
                           todo depende de si es blocante. El protocolo más común es el HTTP, 
                           como en APIs REST o GraphQL

· Modelo publicación suscripción: Los nodos productores (publishers) publican mensajes en un 
                                  canal, y los consumidores (suscriptores) reciben los mensajes
                                  que coinciden con sus suscripciones. Se suele usar con 
                                  sistemas inteligentes de domótica o IoT, por ejemplo MQTT
                                  en Node-Red.

· Comunicación por mensajes: (Message Passing), los nodos se comunican enviando mensajes a 
                             través de un sistema de mensajería. Puede ser punto a punto (P2P)
                             o con sistemas intermediarios, como AWS SQS. Se usan para 
                             procesamiento de trabajos asíncronos, entre otras cosas.

· Streaming: (Transmisión contínua), los datos se envían en tiempo real desde un productor a
             uno o más consumidores (suscribers) de manera continua. Es ideal para grandes 
             volúmenes de datos, eventos en tiempo real, etc... Se suele usar en vídeo, de 
             forma que no hace falta descargar toda una película para empezar a verla.
            
· P2P: (Peer to peer), Todos los nodos actúan como iguales (peers), compartiendo los recursos
       directamente entre ellos. No hay un server central y es muy escalable, aunque complejo
       de gestionar. Se usa en descargas de redes de archivos, como torrents, y en el 
       blockchain como las criptomonedas, la WEB3 o los NFTs...

En este caso vamos a aprender a usar un sistema de publicación-suscripción además del modelo
cliente-servidor visto con sockets. Para este modelo muy usado en IoT, emplearemos programas 
en python que simulen sensores a falta de ellos, y que se comunicará con un sistema típicamente
distribuido como es Node-red para actuar en tiempo real usando el protocolo MQTT y gráficas
que nos permitirán monitorear nuestros "sensores" y "actuadores" 


En primer lugar, para usar Node-red ejecutaremos el siguiente comando Docker:
docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered nodered/node-red

Ahora, entramos a un navegador en el puerto 1880 y debería abrir nuestro Node-red
Tenemos que clicar las tres rayas de config y en administrar paleta, instalar y buscar 
node-red-dashboard.

Ahora mismo, tenemos el sistema guiado por eventos (Node-red) y hemos instalado un plugin 
para poser desarrollar una interfaz para nuestros datos. La interfaz se puede visistar en 
localhost:1880/ui

La interfaz funciona a base de nodos de ui en tablas, de forma que se van construyendo las 
gráficas, textos, etc...
Hay que "compilar" todo nuestro trabajo cada vez que hagamos algún cambio (saldrá un circulo
azul en los nodos cambiados) con el boton de instanciar. 

Para utilizar el protocolo MQTT, necesitaremos un broker MQTT, este puede ser local o en nube.
Por supuesto si es local podemos hacer que sea gratuito sin límite de uso, pero vamos a usar
un servicio de terceros para ver como se integraría todo.
en este caso usaremos MyQttHub, haremos una cuenta y tendremos un plan gratuito bastante 
decente para nuestro uso.

Desde el panel de control, podremos crear usuarios (dispositivos) que se conectarán al broker.
En principio necesitaremos un "dispositivo" por cada sistema diferente que se conecte, por
ejemplo, uno para el programa pyhton que simule los datos de sensores, y otro para el server
Node-red.
Utilizaremos las credenciales de la página para conectarnos desde Node-red, creando un nodo 
de tipo mqtt_in
Podremos escuchar diferentes topics desde el mismo usuario, simplemente suscribiendonos en 
varios nodos mqqtin con el mismo broker. Por ejemplo, a /temp para los datos de temperatura

Para utilizar MQTT desde Python (ya sea para simular sensores o enviar info normal), es algo 
más complejo porque no lo podemos hacer sin programar.
Tendremos que instalar una librería cliente de MQTT, como paho-mqtt con el comando:
pip install paho-mqtt
